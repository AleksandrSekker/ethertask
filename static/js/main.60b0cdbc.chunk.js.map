{"version":3,"sources":["components/GetDataEther.tsx","components/GetDataToken.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GetDataEther","useState","String","state","setstate","web3","Web3","providers","HttpProvider","process","eth","getBalance","err","result","console","log","utils","fromWei","title","GetDataToken","useEffect","getData","a","axios","get","then","res","data","map","Name","tokenName","Symbol","tokenSymbol","Value","value","Id","blockHash","catch","dataSource","columns","dataIndex","key","rowKey","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2ZAIaA,EAAe,WAAO,IAAD,EACNC,mBAASC,QADH,mBACzBC,EADyB,KAClBC,EADkB,KAI1BC,EAAO,IAAIC,IAAK,IAAIA,IAAKC,UAAUC,aAAnB,UAFVC,mEAMZ,OAHAJ,EAAKK,IAAIC,WAAT,UAFqBF,+CAEkB,SAACG,EAAKC,GAC3CD,EAAME,QAAQC,IAAIH,GAAOR,EAASC,EAAKW,MAAMC,QAAQJ,OAGrD,6BACE,kBAAC,IAAD,CAAMK,MAAM,SAASf,K,qDCVdgB,EAAe,WAAO,IAAD,EACNlB,qBADM,mBACzBE,EADyB,KAClBC,EADkB,KAEhCgB,qBAAU,WACRC,MAEC,IACH,IACMA,EAAO,uCAAG,sBAAAC,EAAA,sEACRC,IACHC,IADG,UAFIf,qMAIPgB,MAAK,SAACC,GACLtB,EACEsB,EAAIC,KAAKd,OAAOe,KAAI,SAACF,GAAD,MAAe,CACjCG,KAAMH,EAAII,UACVC,OAAQL,EAAIM,YACZC,MAAOP,EAAIQ,MACXC,GAAIT,EAAIU,kBAIbC,OAAM,SAACzB,GAAD,OAASE,QAAQC,IAAIH,MAbhB,2CAAH,qDAiCb,OAAO,kBAAC,IAAD,CAAO0B,WAAYnC,EAAOoC,QAjBjB,CACd,CACErB,MAAO,OACPsB,UAAW,OACXC,IAAK,QAEP,CACEvB,MAAO,SACPsB,UAAW,SACXC,IAAK,UAEP,CACEvB,MAAO,QACPsB,UAAW,QACXC,IAAK,UAG0CC,OAAO,QC/B7CC,EARH,WACV,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.60b0cdbc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Web3 from 'web3';\nimport { Card } from 'antd';\n\nexport const GetDataEther = () => {\n  const [state, setstate] = useState(String);\n  const url = process.env.REACT_APP_URL;\n  const tokenAddress = process.env.REACT_APP_TOKEN_ADDRESS;\n  const web3 = new Web3(new Web3.providers.HttpProvider(`${url}`));\n  web3.eth.getBalance(`${tokenAddress}`, (err, result) => {\n    err ? console.log(err) : setstate(web3.utils.fromWei(result));\n  });\n  return (\n    <div>\n      <Card title=\"Ether\">{state}</Card>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Table } from 'antd';\nimport axios from 'axios';\n\nexport const GetDataToken = () => {\n  const [state, setstate] = useState();\n  useEffect(() => {\n    getData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const api = process.env.REACT_APP_API;\n  const getData = async () => {\n    await axios\n      .get(`${api}`)\n      .then((res) => {\n        setstate(\n          res.data.result.map((res: any) => ({\n            Name: res.tokenName,\n            Symbol: res.tokenSymbol,\n            Value: res.value,\n            Id: res.blockHash,\n          }))\n        );\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'Name',\n      key: 'name',\n    },\n    {\n      title: 'Symbol',\n      dataIndex: 'Symbol',\n      key: 'symbol',\n    },\n    {\n      title: 'Value',\n      dataIndex: 'Value',\n      key: 'value',\n    },\n  ];\n  return <Table dataSource={state} columns={columns} rowKey=\"Id\" />;\n};\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { GetDataEther } from './components/GetDataEther';\nimport { GetDataToken } from './components/GetDataToken';\n\nconst App = () => {\n  return (\n    <>\n      <GetDataEther />\n      <GetDataToken />\n    </>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}